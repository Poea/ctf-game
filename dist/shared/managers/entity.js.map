{"version":3,"sources":["../../../src/shared/managers/entity.js"],"names":[],"mappings":"y5BAGM;;;KAKJ,SALI,aAKJ,CAAY,cAAZ,CAA4B,sBALxB,eAKwB,IAC1B,CAAK,eAAL,CAAuB,cAAvB,CAD0B,IAE1B,CAAK,SAAL,CAAiB,EAAjB,CAF0B;;;;;kBALxB,qEAgBY,YAAa,SAAU,gBACrC,IAAI,iBAAmB,EAAnB,CADiC,mBAGrC,CAAQ,WAAR,CAAqB,eAAS,CAC5B,IAAI,OAAS,MAAK,SAAL,CAAe,MAAM,EAAN,CAAxB,CADwB,GAGxB,CAAC,MAAD,CAAS,CACX,OAAS,MAAK,eAAL,CAAqB,KAArB,CAAT,CADW,GAGP,MAAJ,CAAY,CACV,MAAK,SAAL,CAAe,MAAf,EADU,CAHd,GAQI,MAAJ,CAAY,CACV,OAAO,MAAP,CAAc,KAAd,CAAqB,QAArB,EADU,gBAEV,CAAiB,IAAjB,CAAsB,MAAM,EAAN,CAAtB,CAFU,CAXO,CAArB,CAHqC,IAoBrC,CAAK,SAAL,CAAiB,KAAK,SAAL,CAAe,MAAf,CAAsB,gBAAU,CAC/C,IAAM,MAAQ,iBAAiB,OAAjB,CAAyB,OAAO,EAAP,CAAzB,GAAwC,CAAC,CAAD,CADP,GAG3C,CAAC,KAAD,CAAQ,CACV,OAAO,OAAP,GADU,OAIL,KAAP,CAP+C,CAAjD,CApBqC;;;iDAmC7B,OAAQ,CAChB,GAAI,CAAC,MAAD,4BAAJ,CAA+B,CAC7B,MAAM,IAAI,KAAJ,CAAU,uCAAV,CAAN,CAD6B,IAI/B,CAAK,SAAL,CAAe,IAAf,CAAoB,MAApB,EALgB;;;;iDAaR,GAAI,CACZ,OAAO,iBAAK,KAAK,SAAL,CAAgB,wBAAU,OAAO,OAAP,CAAe,IAAf,IAAyB,EAAzB,CAAV,CAA5B,CADY;;;;2DASC,OAAQ,CACrB,OAAO,KAAK,SAAL,CAAe,MAAf,CAAsB,MAAtB,CAAP,CADqB;;;;uDASV,KAAM,CACjB,OAAO,KAAK,SAAL,CAAe,MAAf,CAAsB,wBAAU,OAAO,OAAP,CAAe,MAAf,IAA2B,IAA3B,CAAV,CAA7B,CADiB,WAlFf,iCAuFS","file":"entity.js","sourcesContent":["import { find, forEach } from 'lodash';\nimport Entity from 'shared/game/entity';\n\nclass EntityManager {\n  /**\n   *\n   * @param {function} onEntityCreate\n   */\n  constructor(onEntityCreate) {\n    this._onEntityCreate = onEntityCreate;\n    this._entities = [];\n  }\n\n  /**\n   *\n   * @param {Object} entityProps\n   * @param {function} dispatch\n   * @returns {Array}\n   */\n  updateFromProps(entityProps, dispatch) {\n    let updatedEntityIds = [];\n\n    forEach(entityProps, props => {\n      let entity = this.getEntity(props.id);\n\n      if (!entity) {\n        entity = this._onEntityCreate(props);\n\n        if (entity) {\n          this.addEntity(entity);\n        }\n      }\n\n      if (entity) {\n        entity.update(props, dispatch);\n        updatedEntityIds.push(props.id);\n      }\n    });\n\n    this._entities = this._entities.filter(entity => {\n      const found = updatedEntityIds.indexOf(entity.id) !== -1;\n\n      if (!found) {\n        entity.destroy();\n      }\n\n      return found;\n    });\n  }\n\n  /**\n   *\n   * @param {Entity} entity\n   */\n  addEntity(entity) {\n    if (!entity instanceof Entity) {\n      throw new Error('Entity must be an instance of Entity.');\n    }\n\n    this._entities.push(entity);\n  }\n\n  /**\n   *\n   * @param {string} id\n   * @returns {Entity}\n   */\n  getEntity(id) {\n    return find(this._entities, entity => entity.getProp('id') === id);\n  }\n\n  /**\n   *\n   * @param {function} filter\n   * @return {Array}\n   */\n  filterEntities(filter) {\n    return this._entities.filter(filter);\n  }\n\n  /**\n   *\n   * @param {string} type\n   * @returns {Array}\n   */\n  filterByType(type) {\n    return this._entities.filter(entity => entity.getProp('type') === type);\n  }\n}\n\nexport default EntityManager;\n"]}