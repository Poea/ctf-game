{"version":3,"sources":["../../../src/server/game/server.js"],"names":[],"mappings":"28BAGM;;;KAKJ,SALI,MAKJ,CAAY,EAAZ,CAAgB,sBALZ,QAKY,IACd,CAAK,GAAL,CAAW,EAAX,CADc,IAEd,CAAK,QAAL,CAAgB,EAAhB,CAFc,IAGd,CAAK,SAAL,CAAiB,EAAjB,CAHc;;kBALZ,yCAcG,CACL,IAAM,QAAU,qBAAW,KAAK,GAAL,CAArB,CADD,IAGL,CAAK,UAAL,CAAgB,OAAhB,EAHK,OAKL,CAAQ,KAAR,GALK,IAOL,CAAK,GAAL,CAAS,EAAT,CAAY,YAAZ,CAA0B,KAAK,gBAAL,CAAsB,IAAtB,CAA2B,IAA3B,CAA1B,EAPK;;;mDAcI,QAAS,CAClB,KAAK,SAAL,CAAe,IAAf,CAAoB,OAApB,EADkB;;;iDAQV,OAAQ,CAChB,KAAK,QAAL,CAAc,IAAd,CAAmB,MAAnB,EADgB;;;uDAQL,GAAI,CACf,KAAK,QAAL,CAAgB,KAAK,QAAL,CAAc,MAAd,CAAqB,wBAAU,OAAO,EAAP,GAAc,EAAd,CAAV,CAArC,CADe;;;+DAQA,OAAQ,CACvB,IAAM,OAAS,qBAAW,IAAX,CAAiB,MAAjB,CAAT,CADiB,IAGvB,CAAK,SAAL,CAAe,MAAf,EAHuB,IAIvB,CAAK,oBAAL,CAA0B,MAA1B,EAJuB;;;uEAWJ,OAAQ,CAC3B,IAAM,QAAU,KAAK,SAAL,CAAe,CAAf,CAAV,CADqB,MAG3B,CAAO,WAAP,CAAmB,OAAnB,EAH2B,WA/DzB,0BAsES","file":"server.js","sourcesContent":["import Castle from './sessions/castle';\nimport Client from './client';\n\nclass Server {\n  /**\n   * Creates a new game server.\n   * @param io\n   */\n  constructor(io) {\n    this._io = io;\n    this._clients = [];\n    this._sessions = [];\n  }\n\n  /**\n   * Boots the game server.\n   */\n  boot() {\n    const session = new Castle(this._io);\n\n    this.addSession(session);\n\n    session.start();\n\n    this._io.on('connection', this.handleConnection.bind(this));\n  }\n\n  /**\n   * Adds a session to the server's session pool.\n   * @param {Session} session\n   */\n  addSession(session) {\n    this._sessions.push(session);\n  }\n\n  /**\n   * Adds a client to the server's client pool.\n   * @param {Client} client\n   */\n  addClient(client) {\n    this._clients.push(client);\n  }\n\n  /**\n   * Removes a client from the server's client pool.\n   * @param {string} id\n   */\n  removeClient(id) {\n    this._clients = this._clients.filter(client => client.id !== id);\n  }\n\n  /**\n   * Called when a client connects to the server.\n   * @param socket\n   */\n  handleConnection(socket) {\n    const client = new Client(this, socket);\n\n    this.addClient(client);\n    this.findSessionForClient(client);\n  }\n\n  /**\n   * Finds a suitable session for a client.\n   * @param {Client} client\n   */\n  findSessionForClient(client) {\n    const session = this._sessions[0];\n\n    client.joinSession(session);\n  }\n}\n\nexport default Server;\n"]}