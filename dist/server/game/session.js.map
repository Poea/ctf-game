{"version":3,"sources":["../../../src/server/game/session.js"],"names":[],"mappings":"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","file":"session.js","sourcesContent":["import shortid from 'shortid';\nimport { forEach, find, now } from 'lodash';\nimport { logger } from '../helpers/vendor';\nimport createStore from '../store';\nimport { addEntity, removeEntity, assignTeam, leaveTeam, advanceTime } from '../actions/game';\nimport { createEntity } from '../factories/entity';\nimport { createMap } from '../factories/map';\nimport { DATA_PATH, GAME_TICK_RATE, GAME_SYNC_RATE } from '../constants';\n\n// TODO: Separate game logic and generic game session logic into two different classes.\n\nclass Session {\n  /**\n   * Creates a new game session.\n   * @param io\n   */\n  constructor(io) {\n    this._io = io;\n    this._id = shortid.generate();\n    this._store = createStore();\n    this._gameData = this.loadGameData();\n    this._isRunning = false;\n    this._lastTickAt = null;\n    this._entities = [];\n    this._packetSequence = 0;\n    this._lastSyncAt = null;\n\n    // Notify each client every time the state is changed.\n    this._unsubscribeFromStore = this._store.subscribe(this.handleStateChange.bind(this));\n\n    logger.info(`session.create (session_id: ${this._id})`);\n  }\n\n  /**\n   * Loads the game data for this game session.\n   * @returns {Object}\n   */\n  loadGameData() {\n    return {\n      assets: require(`${DATA_PATH}/assets.json`),\n      config: require(`${DATA_PATH}/config.json`),\n      ui: require(`${DATA_PATH}/ui.json`),\n      map: createMap('castle', this._store.dispatch)\n    };\n  }\n\n  /**\n   * Starts this session.\n   */\n  start() {\n    this._isRunning = true;\n\n    setInterval(this.tick.bind(this), 1000 / GAME_TICK_RATE);\n\n    logger.info(`session.start (session_id: ${this._id})`);\n  }\n\n  /**\n   * Called each time this session is updated.\n   */\n  tick() {\n    let timeNow, timeElapsed;\n\n    if (this._isRunning) {\n      timeNow = now();\n      timeElapsed = this._lastTickAt ? timeNow - this._lastTickAt : 0;\n\n      this._store.dispatch(advanceTime(timeElapsed));\n\n      this.update();\n\n      this._lastTickAt = timeNow;\n    }\n  }\n\n  /**\n   * Called each time this sessions should be updated.\n   */\n  update() {\n    const gameState = this.gameState;\n\n    this.updateEntities(gameState);\n  }\n\n  /**\n   * Ends this session.\n   */\n  end() {\n    this._unsubscribeFromStore();\n  }\n\n  /**\n   * Updates each entity in this session.\n   */\n  updateEntities(gameState) {\n    let removedEntityIds = this.getEntityIds();\n\n    forEach(gameState.entities, props => {\n      let entity = find(this._entities, e => e.id === props.id);\n\n      // Create the entity if it does not exist.\n      if (!entity) {\n        entity = createEntity(this, props);\n        this.addEntity(entity);\n      }\n\n      entity.update(props, this._store.dispatch);\n\n      // Remove updated entities from the list of entities to be removed.\n      removedEntityIds = removedEntityIds.filter(id => id !== props.id);\n    });\n\n    // Destroy entities that have been removed.\n    this.destroyEntities(removedEntityIds);\n  }\n\n  /**\n   * Adds an entity to this session's entity pool.\n   * @param {Entity} entity\n   */\n  addEntity(entity) {\n    this._entities.push(entity);\n  }\n\n  /**\n   * Returns a list containing the id of every entity in this session.\n   * @returns {Array}\n   */\n  getEntityIds() {\n    let ids = [];\n\n    forEach(this._entities, entity => {\n      ids.push(entity.id);\n    });\n\n    return ids;\n  }\n\n  /**\n   * Destroys a set of entities from this session's entity pool.\n   * @param {Array} ids\n   */\n  destroyEntities(ids) {\n    this._entities = this._entities.filter(entity => {\n      let isRemoved = ids.indexOf(entity.id) !== -1;\n\n      if (isRemoved) {\n        entity.destroy();\n      }\n\n      return !isRemoved;\n    });\n  }\n\n  /**\n   * Adds a player to this session.\n   * @param {Object} props\n   */\n  addPlayer(props) {\n    this._store.dispatch(addEntity(props));\n    this._store.dispatch(assignTeam(props.id));\n  }\n\n  /**\n   * Removes a player from this session.\n   * @param {string} id\n   */\n  removePlayer(id) {\n    this._store.dispatch(leaveTeam(id));\n    this._store.dispatch(removeEntity(id));\n  }\n\n  /**\n   * Called by clients to dispatch actions received from the browser.\n   * @param {Object} action\n   */\n  handleClientAction(action) {\n    this._store.dispatch(action);\n  }\n\n  /**\n   * Called each time the state of this session changes.\n   */\n  handleStateChange() {\n    if (this._isRunning && this.shouldSendState()) {\n      this._io.to(this.channel).emit('set_state', this.gameState, this._packetSequence++);\n      this._lastSyncAt = now();\n    }\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  shouldSendState() {\n    return !this._lastSyncAt || (now() - this._lastSyncAt) > (1000 / GAME_SYNC_RATE);\n  }\n\n  /**\n   * Returns the id of this session.\n   * @returns {string}\n   */\n  get id() {\n    return this._id;\n  }\n\n  /**\n   * Returns the socket room for this session.\n   * @returns {string}\n   */\n  get channel() {\n    return `session/${this._id}`;\n  }\n\n  /**\n   * Returns the game data for this session.\n   * @returns {Object}\n   */\n  get gameData() {\n    return this._gameData;\n  }\n\n  /**\n   * Returns the current state of this session.\n   * @returns {Object}\n   */\n  get gameState() {\n    return this._store.getState().game.toJS();\n  }\n}\n\nexport default Session;\n"]}