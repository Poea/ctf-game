{"version":3,"sources":["../../../src/server/game/session.js"],"names":[],"mappings":"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","file":"session.js","sourcesContent":["/*eslint no-unused-vars: 0*/\n\nimport shortid from 'shortid';\nimport { find, forEach, get, now } from 'lodash';\nimport { logger } from '../helpers/vendor';\nimport { buildStore } from '../helpers/store';\nimport { addEntity, removeEntity } from '../actions/entity';\nimport { advanceElapsed } from '../actions/time';\nimport { createEntity } from '../factories/entity';\nimport { createMap } from '../factories/map';\nimport { DATA_PATH, GAME_TICK_RATE, GAME_SYNC_RATE } from '../constants';\nimport EntityManager from 'shared/managers/entity';\n\nclass Session {\n  /**\n   * Creates a new game session.\n   * @param {string} name\n   * @param io\n   */\n  constructor(name, io) {\n    this._name = name;\n    this._io = io;\n    this._id = shortid.generate();\n    this._store = buildStore();\n    this._gameData = this.loadGameData();\n    this._isRunning = false;\n    this._lastTickAt = null;\n    this._entities = new EntityManager(props => createEntity(this, props));\n    this._packetSequence = 0;\n    this._lastSyncAt = null;\n\n    // Notify each client every time the state is changed.\n    this._unsubscribeFromStore = this._store.subscribe(this.handleStateChange.bind(this));\n\n    this.create();\n  }\n\n  /**\n   * Loads the game data for this game session.\n   * @returns {Object}\n   */\n  loadGameData() {\n    return {\n      assets: require(`${DATA_PATH}/assets.json`),\n      config: require(`${DATA_PATH}/config.json`),\n      entities: require(`${DATA_PATH}/entities.json`),\n      ui: require(`${DATA_PATH}/ui.json`),\n      map: createMap(this._name, this._store.dispatch)\n    };\n  }\n\n  /**\n   * Creates this session.\n   */\n  create() {\n  }\n\n  /**\n   * Starts this session.\n   */\n  start() {\n    this._isRunning = true;\n\n    setInterval(this.tick.bind(this), 1000 / GAME_TICK_RATE);\n\n    logger.info(`session.start (session_id: ${this._id})`);\n  }\n\n  /**\n   * Called each time this session is updated.\n   */\n  tick() {\n    let timeNow, timeElapsed;\n\n    if (this._isRunning) {\n      timeNow = now();\n      timeElapsed = this._lastTickAt ? timeNow - this._lastTickAt : 0;\n\n      this._store.dispatch(advanceElapsed(timeElapsed));\n\n      this.update();\n\n      this._lastTickAt = timeNow;\n    }\n  }\n\n  /**\n   * Called each time this sessions should be updated.\n   */\n  update() {\n    this.updateEntities();\n  }\n\n  /**\n   * Updates the state for each entity in the session,\n   * as well as creates new entities and destroys expired entities.\n   */\n  updateEntities() {\n    const gameState = this.gameState;\n\n    this._entities.updateFromProps(gameState.entities, this.dispatch.bind(this));\n  }\n\n  /**\n   * Ends this session.\n   */\n  end() {\n    this._unsubscribeFromStore();\n  }\n\n  /**\n   * Adds a player to this session.\n   * @param {Object} props\n   */\n  addPlayer(props) {\n    this.dispatch(addEntity(props));\n  }\n\n  /**\n   * Removes a player from this session.\n   * @param {string} id\n   */\n  removePlayer(id) {\n    this.dispatch(removeEntity(id));\n  }\n\n  /**\n   * Called by clients to dispatch actions received from the browser.\n   * @param {Object} action\n   */\n  handleClientAction(action) {\n    this._store.dispatch(action);\n  }\n\n  /**\n   * Called each time the state of this session changes.\n   */\n  handleStateChange() {\n    if (this._isRunning && this.shouldSendState()) {\n      this._io.to(this.channel).emit('set_state', this.gameState, this._packetSequence++);\n      this._lastSyncAt = now();\n    }\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  shouldSendState() {\n    return !this._lastSyncAt || (now() - this._lastSyncAt) > (1000 / GAME_SYNC_RATE);\n  }\n\n  /**\n   * Dispatches an action to the sessions store.\n   * @param {Object} action\n   */\n  dispatch(action) {\n    this._store.dispatch(action);\n  }\n\n  /**\n   * \n   * @param {string} id\n   * @returns {Entity}\n   */\n  getEntity(id) {\n    return this._entities.getEntity(id);\n  }\n\n  /**\n   * Returns data for this game.\n   * @param {string} key\n   * @returns {*}\n   */\n  getGameData(key) {\n    return get(this._gameData, key);\n  }\n\n  /**\n   * Returns the id of this session.\n   * @returns {string}\n   */\n  get id() {\n    return this._id;\n  }\n\n  /**\n   * Returns the socket room for this session.\n   * @returns {string}\n   */\n  get channel() {\n    return `session/${this._id}`;\n  }\n\n  /**\n   * Returns the game data for this session.\n   * @returns {Object}\n   */\n  get gameData() {\n    return this._gameData;\n  }\n\n  /**\n   * Returns the current state of this session.\n   * @returns {Object}\n   */\n  get gameState() {\n    const state = this._store.getState();\n\n    return {\n      entities: state.entities.toJS(),\n      timestamp: now()\n    };\n  }\n}\n\nexport default Session;\n"]}