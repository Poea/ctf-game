{"version":3,"sources":["../../../src/server/helpers/game.js"],"names":[],"mappings":"8EAQgB,4CAsBA,wDAsBA;;;;GA5CT,SAAS,iBAAT,CAA2B,QAA3B,CAAqC,CAC1C,IAAI,aAAe,CAAC,CAAD,CAAI,OAAS,CAAC,CAAD,CADU,IAGrC,IAAI,EAAI,CAAJ,CAAO,EAAI,SAAS,MAAT,CAAiB,GAArC,CAA0C,CACxC,GAAI,SAAS,CAAT,EAAY,IAAZ,GAAqB,uBAAY,IAAZ,CAAkB,CACzC,IAAI,SAAW,SAAS,CAAT,EAAY,OAAZ,CAAsB,SAAS,CAAT,EAAY,OAAZ,CAAoB,MAApB,CAA6B,CAAnD,CAD0B,GAErC,aAAe,CAAf,EAAoB,SAAW,YAAX,CAAyB,CAC/C,aAAe,QAAf,CAD+C,MAE/C,CAAS,SAAS,CAAT,EAAY,EAAZ,CAFsC,CAFnD,CADF,OAUO,MAAP,CAb0C;;;;;GAsBrC,SAAS,uBAAT,CAAiC,QAAjC,CAA2C,EAA3C,CAA+C,CACpD,IAAI,OAAS,CAAC,CAAD,CADuC,IAG/C,IAAI,EAAI,CAAJ,CAAO,EAAI,SAAS,MAAT,CAAiB,GAArC,CAA0C,CACxC,GAAI,SAAS,CAAT,EAAY,IAAZ,GAAqB,uBAAY,IAAZ,EAAoB,SAAS,CAAT,EAAY,OAAZ,CAAqB,CAChE,IAAK,IAAI,EAAI,CAAJ,CAAO,EAAI,SAAS,CAAT,EAAY,OAAZ,CAAoB,MAApB,CAA4B,GAAhD,CAAqD,CACnD,GAAI,SAAS,CAAT,EAAY,OAAZ,CAAoB,CAApB,IAA2B,EAA3B,CAA+B,CACjC,OAAS,CAAT,CADiC,CADrC,CADF,CADF,OAUO,MAAP,CAboD;;;;;GAsB/C,SAAS,0BAAT,CAAoC,WAApC,CAAiD,SAAjD,CAA4D,CACjE,OAAO,CACL,EAAG,eAAO,OAAP,CAAe,CAAE,IAAK,UAAU,CAAV,CAAa,IAAK,SAAC,CAAU,CAAV,CAAc,UAAU,KAAV,CAAmB,YAAY,KAAZ,CAA1E,CAAH,CACA,EAAG,eAAO,OAAP,CAAe,CAAE,IAAK,UAAU,CAAV,CAAa,IAAK,SAAC,CAAU,CAAV,CAAc,UAAU,MAAV,CAAoB,YAAY,MAAZ,CAA3E,CAAH,CAFF,CADiE","file":"game.js","sourcesContent":["import { chance } from './vendor';\nimport { EntityTypes } from 'shared/constants';\n\n/**\n *\n * @param {Array} entities\n * @returns {string}\n */\nexport function findWeakestTeamId(entities) {\n  let leastPlayers = -1, result = -1;\n\n  for (let i = 0; i < entities.length; i++) {\n    if (entities[i].type === EntityTypes.TEAM) {\n      let teamSize = entities[i].players ? entities[i].players.length : 0;\n      if (leastPlayers < 0 || teamSize < leastPlayers) {\n        leastPlayers = teamSize;\n        result = entities[i].id;\n      }\n    }\n  }\n\n  return result;\n}\n\n/**\n *\n * @param {Array} entities\n * @param {string} id\n * @returns {number}\n */\nexport function findTeamIndexByPlayerId(entities, id) {\n  let result = -1;\n\n  for (let i = 0; i < entities.length; i++) {\n    if (entities[i].type === EntityTypes.TEAM && entities[i].players) {\n      for (let j = 0; j < entities[i].players.length; j++) {\n        if (entities[i].players[j] === id) {\n          result = i;\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\n/**\n *\n * @param {Object} playerProps\n * @param {Object} baseProps\n * @returns {{x: number, y: number}}\n */\nexport function calculateBaseSpawnPosition(playerProps, baseProps) {\n  return {\n    x: chance.integer({ min: baseProps.x, max: (baseProps.x + baseProps.width) - playerProps.width }),\n    y: chance.integer({ min: baseProps.y, max: (baseProps.y + baseProps.height) - playerProps.height })\n  };\n}\n"]}