{"version":3,"sources":["../../../src/server/factories/entity.js"],"names":[],"mappings":"iIA8FgB,siBA/ET,IAAM,sBAAS,QAAT,CACN,IAAM,kBAAO,MAAP,CACN,IAAM,kBAAO,MAAP,CAEb,IAAM,gBAAkB,EAAlB;;;;;GAQN,SAAS,YAAT,CAAsB,OAAtB,CAA+B,KAA/B,CAAsC,CACpC,IAAM,OAAS,qBAAW,KAAX,CAAT,CAD8B,IAG9B,eAAiB,SAAjB,cAAiB,CAAS,KAAT,CAAgB,QAAhB,CAA0B,CAC/C,GAAI,CAAC,MAAM,MAAN,EAAgB,MAAM,aAAN,EAAuB,CAAvB,CAA0B,CAC7C,SAAS,qBAAW,MAAM,EAAN,CAAU,MAAM,cAAN,CAA9B;AAD6C,UAI7C,CAAW,UAAM,CACf,SAAS,sBAAY,MAAM,EAAN,CAArB,EADe,UAGf,CAAW,UAAM,CACf,SAAS,oBAAU,MAAM,EAAN,CAAnB,EADe,CAEd,GAFH,EAHe,CAMd,MAAM,cAAN,CANH,CAJ6C,CAD1B,CAHa,MAkBpC,CAAO,YAAP,CAAoB,qBAAW,cAAX,CAApB,EAlBoC,OAoB7B,MAAP,CApBoC;;;;;GA6BtC,SAAS,UAAT,CAAoB,OAApB,CAA6B,KAA7B,CAAoC,CAClC,IAAM,OAAS,qBAAW,KAAX,CAAT,CAD4B,OAG3B,MAAP,CAHkC;;;;;GAYpC,SAAS,UAAT,CAAoB,OAApB,CAA6B,KAA7B,CAAoC,CAClC,IAAM,OAAS,qBAAW,KAAX,CAAT,CAD4B,IAG5B,eAAiB,SAAjB,cAAiB,CAAS,WAAT,CAAsB,QAAtB,CAAgC,gBACrD,GAAI,YAAY,OAAZ,EAAuB,YAAY,QAAZ,EAAwB,KAAK,gBAAL,EAA/C,CAAwE,aAC1E,IAAM,OAAS,YAAY,QAAZ,CAAuB,eAAvB,CAEf,oBAAQ,YAAY,OAAZ,CAAqB,kBAAY,CACvC,SAAS,qBAAW,QAAX,CAAqB,MAArB,CAAT,EADuC,CAAzC,CAIA,MAAK,WAAL,OAP0E,CADvD,CAHW,MAelC,CAAO,YAAP,CAAoB,qBAAW,cAAX,CAApB,EAfkC,OAiB3B,MAAP,CAjBkC;;;;;GA0B7B,SAAS,YAAT,CAAsB,OAAtB,CAA+B,KAA/B,CAAsC,CAC3C,OAAQ,MAAM,IAAN,EACN,KAAK,MAAL,CACE,OAAO,aAAa,OAAb,CAAsB,KAAtB,CAAP,CADF,KAGK,IAAL,CACE,OAAO,WAAW,OAAX,CAAoB,KAApB,CAAP,CADF,KAGK,IAAL,CACE,OAAO,WAAW,OAAX,CAAoB,KAApB,CAAP,CADF,QAIE,eAAO,IAAP,4CAAuD,MAAM,IAAN,IAAvD,EADF,OAES,IAAP,CAFF,CAXyC,CAAtC","file":"entity.js","sourcesContent":["/*eslint no-shadow: 0*/\n/*eslint no-unused-vars: 0*/\n\nimport { forEach } from 'lodash';\nimport { logger } from '../helpers/vendor';\nimport Entity from 'shared/game/entity';\nimport Health from '../game/components/health';\nimport Points from '../game/components/points';\nimport {\n  killEntity,\n  beginRevive,\n  endRevive,\n  givePoints\n} from '../actions/game';\n\nexport const PLAYER = 'player';\nexport const TEAM = 'team';\nexport const FLAG = 'flag';\n\nconst POINTS_PER_FLAG = 50;\n\n/**\n *\n * @param {Session} session\n * @param {Object} props\n * @returns {Entity}\n */\nfunction createPlayer(session, props) {\n  const entity = new Entity(props);\n\n  const onHealthUpdate = function(props, dispatch) {\n    if (!props.isDead && props.currentHealth <= 0) {\n      dispatch(killEntity(props.id, props.lastAttackerId));\n\n      // Automatically revive the entity in a while\n      setTimeout(() => {\n        dispatch(beginRevive(props.id));\n\n        setTimeout(() => {\n          dispatch(endRevive(props.id));\n        }, 100);\n      }, props.reviveDuration);\n    }\n  };\n\n  entity.addComponent(new Health(onHealthUpdate));\n\n  return entity;\n}\n\n/**\n *\n * @param {Session} session\n * @param {Object} props\n * @returns {Entity}\n */\nfunction createFlag(session, props) {\n  const entity = new Entity(props);\n\n  return entity;\n}\n\n/**\n *\n * @param {Session} session\n * @param {Object} props\n * @returns {Entity}\n */\nfunction createTeam(session, props) {\n  const entity = new Entity(props);\n\n  const onPointsUpdate = function(updateProps, dispatch) {\n    if (updateProps.players && updateProps.numFlags && this.shouldGivePoints()) {\n      const points = updateProps.numFlags * POINTS_PER_FLAG;\n\n      forEach(updateProps.players, playerId => {\n        dispatch(givePoints(playerId, points));\n      });\n      \n      this.pointsGiven();\n    }\n  };\n\n  entity.addComponent(new Points(onPointsUpdate));\n\n  return entity;\n}\n\n/**\n *\n * @param {Session} session\n * @param {Object} props\n * @returns {Entity}\n */\nexport function createEntity(session, props) {\n  switch (props.type) {\n    case PLAYER:\n      return createPlayer(session, props);\n\n    case FLAG:\n      return createFlag(session, props);\n\n    case TEAM:\n      return createTeam(session, props);\n\n    default:\n      logger.warn(`trying to create entity of unknown type ${props.type}.`);\n      return null;\n  }\n}\n"]}