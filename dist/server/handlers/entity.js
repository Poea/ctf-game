'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.handlers=undefined;var _handlers;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};exports.onAddEntity=onAddEntity;exports.onRemoveEntity=onRemoveEntity;exports.onDamageEntity=onDamageEntity;exports.onKillEntity=onKillEntity;exports.onBeginRevive=onBeginRevive;exports.onEndRevive=onEndRevive;exports.onJoinTeam=onJoinTeam;exports.onLeaveTeam=onLeaveTeam;exports.onGivePoints=onGivePoints;exports.onTagFlag=onTagFlag;var _immutable=require('immutable');var _entity=require('../../shared/handlers/entity');var _game=require('../../shared/helpers/game');var _game2=require('../helpers/game');var _constants=require('../../shared/constants');function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else {obj[key]=value}return obj}function onAddEntity(state,action){var entity=action.entity;return state.push((0,_immutable.fromJS)(entity))}function onRemoveEntity(state,action){var id=action.id;return state.filter(function(entity){return entity.get('id')!==id})}function onDamageEntity(state,action){var id=action.id;var victimId=action.victimId;var entities=state.toJS();var attackerIndex=(0,_game.findEntityIndexById)(entities,id);var victimIndex=(0,_game.findEntityIndexById)(entities,victimId);var attackerColor=state.getIn([attackerIndex,'color']);var victimColor=state.getIn([victimIndex,'color']);if(attackerColor===victimColor){return state}var damage=state.getIn([attackerIndex,'damage']);var health=state.getIn([victimIndex,'health']);return state.updateIn([victimIndex,'currentHealth'],health,function(value){return value-damage}).setIn([victimIndex,'lastAttackerId'],id)}function onKillEntity(state,action){var id=action.id;var lastAttackerId=action.lastAttackerId;var entities=state.toJS();var entityIndex=(0,_game.findEntityIndexById)(entities,id);var attackerIndex=(0,_game.findEntityIndexById)(entities,lastAttackerId);return setIsDead(state,action,true).setIn([entityIndex,'currentHealth'],0).updateIn([attackerIndex,'numKills'],0,function(value){return value+1}).updateIn([entityIndex,'numDeaths'],0,function(value){return value+1})}function onBeginRevive(state,action){var id=action.id;var entities=state.toJS();var playerIndex=(0,_game.findEntityIndexById)(entities,id);var playerProps=state.get(playerIndex).toJS();if(playerProps.team){var teamIndex=(0,_game.findEntityIndexById)(entities,playerProps.team);var teamProps=state.get(teamIndex).toJS();var _calculateBaseSpawnPo=(0,_game2.calculateBaseSpawnPosition)(playerProps,teamProps.base);var x=_calculateBaseSpawnPo.x;var y=_calculateBaseSpawnPo.y;state=(0,_entity.onSetPosition)(state,_extends({},action,{x:x,y:y}))}var health=state.getIn([playerIndex,'health']);return setIsDead(setIsReviving(state,action,true),action,false).setIn([playerIndex,'currentHealth'],health).removeIn([playerIndex,'lastAttackerId'])}function onEndRevive(state,action){return setIsReviving(setIsDead(state,action,false),action,false)}function onJoinTeam(state,action){var teamId=action.teamId;var playerId=action.playerId;var entities=state.toJS();var playerIndex=(0,_game.findEntityIndexById)(entities,playerId);var teamIndex=(0,_game.findEntityIndexById)(entities,teamId);var playerProps=state.get(playerIndex).toJS();var teamProps=state.get(teamIndex).toJS();if(teamProps.base){var _calculateBaseSpawnPo2=(0,_game2.calculateBaseSpawnPosition)(playerProps,teamProps.base);var x=_calculateBaseSpawnPo2.x;var y=_calculateBaseSpawnPo2.y;state=(0,_entity.onSetPosition)(state,_extends({},action,{id:playerId,x:x,y:y}))}return state.updateIn([teamIndex,'players'],(0,_immutable.List)(),function(players){return players.push(playerId)}).setIn([playerIndex,'team'],teamProps.id).setIn([playerIndex,'color'],teamProps.color).setIn([playerIndex,'hexColor'],teamProps.hexColor)}function onLeaveTeam(state,action){var playerId=action.playerId;var entities=state.toJS();var teamIndex=(0,_game2.findTeamIndexByPlayerId)(entities,playerId); // TODO: Figure out a way to remove the color, etc. from the player as well.
return state.updateIn([teamIndex,'players'],function(players){return players.filter(function(id){return id!==playerId})})}function onGivePoints(state,action){var id=action.id;var points=action.points;var entityIndex=(0,_game.findEntityIndexById)(state.toJS(),id);return state.updateIn([entityIndex,'points'],0,function(value){return value+points})}function onTagFlag(state,action){var flagId=action.flagId;var playerId=action.playerId;var entities=state.toJS();var playerIndex=(0,_game.findEntityIndexById)(entities,playerId);var flagIndex=(0,_game.findEntityIndexById)(entities,flagId);var oldTeamId=state.getIn([flagIndex,'team']);var newTeamId=state.getIn([playerIndex,'team']);var oldTeamIndex=(0,_game.findEntityIndexById)(entities,oldTeamId);var newTeamIndex=(0,_game.findEntityIndexById)(entities,newTeamId);var playerColor=state.getIn([playerIndex,'color']);var flagColor=state.getIn([flagIndex,'color']);if(playerColor===flagColor){return state}return state.setIn([flagIndex,'color'],playerColor).setIn([flagIndex,'team'],newTeamId).updateIn([oldTeamIndex,'numFlags'],function(value){return value-1}).updateIn([newTeamIndex,'numFlags'],function(value){return (value||0)+1})}function setIsDead(state,action,value){var id=action.id;var entityIndex=(0,_game.findEntityIndexById)(state.toJS(),id);return state.setIn([entityIndex,'isDead'],value)}function setIsReviving(state,action,value){var id=action.id;var entityIndex=(0,_game.findEntityIndexById)(state.toJS(),id);return state.setIn([entityIndex,'isReviving'],value)}var handlers=exports.handlers=(_handlers={},_defineProperty(_handlers,_constants.EntityActions.SET_POSITION,_entity.onSetPosition),_defineProperty(_handlers,_constants.EntityActions.SET_ANIMATION,_entity.onSetAnimation),_defineProperty(_handlers,_constants.EntityActions.SET_FACING,_entity.onSetFacing),_defineProperty(_handlers,_constants.EntityActions.ADD_ENTITY,onAddEntity),_defineProperty(_handlers,_constants.EntityActions.REMOVE_ENTITY,onRemoveEntity),_defineProperty(_handlers,_constants.EntityActions.DAMAGE_ENTITY,onDamageEntity),_defineProperty(_handlers,_constants.EntityActions.KILL_ENTITY,onKillEntity),_defineProperty(_handlers,_constants.EntityActions.BEGIN_REVIVE,onBeginRevive),_defineProperty(_handlers,_constants.EntityActions.END_REVIVE,onEndRevive),_defineProperty(_handlers,_constants.EntityActions.TAG_FLAG,onTagFlag),_defineProperty(_handlers,_constants.EntityActions.JOIN_TEAM,onJoinTeam),_defineProperty(_handlers,_constants.EntityActions.LEAVE_TEAM,onLeaveTeam),_defineProperty(_handlers,_constants.EntityActions.GIVE_POINTS,onGivePoints),_handlers);
//# sourceMappingURL=entity.js.map